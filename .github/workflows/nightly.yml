name: Nightly Check

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}
  GIT_PAT: ${{ secrets.GIT_PAT }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          ref: ${{ github.event_name == 'schedule' && 'development' || github.ref }}
          token: ${{ secrets.GIT_PAT }}
  

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Run Test Suite
        id: test_suite
        continue-on-error: true
        run: |
          echo "TEST_START=$(date +%s)" >> $GITHUB_ENV  

          yarn test

          end=$(date +%s)
          duration=$((end-${{ env.TEST_START }}))

          echo "DURATION=$duration" >> $GITHUB_ENV
          echo "Time taken to run the tests: $duration seconds"

          echo "::set-output name=passed::$?"

      - name: Set Test Result Env Variable
        run: |
          if [ ${{ steps.test_suite.outputs.passed }} -eq 0 ]; then
            echo "TEST_PASS=true" >> $GITHUB_ENV
          else
            echo "TEST_PASS=false" >> $GITHUB_ENV
          fi

      - name: Getting Test Coveragev (TODO)
        run: |
          echo "COVERAGE_FUNC=0" >> $GITHUB_ENV

      - name: Run ESLint on tests
        continue-on-error: true
        run: |
          LINT_OUTPUT=`yarn eslint test/ | grep "problems (" | awk '{print $2}'`
          echo $LINT_OUTPUT
          echo "LINT_PROBLEMS=$LINT_OUTPUT" >> $GITHUB_ENV
          continue-on-error: true

      - name: Report test metrics
        run: |
          echo "Time taken to run the tests: ${{ env.DURATION }} seconds"
          yarn add install axios dotenv
          node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} test_run '{"pass": "${{ env.TEST_PASS }}", "time": "${{ env.DURATION }}" ,"coverage": {"functions": "${{ env.COVERAGE_FUNC }}"}, "linter_issues": {"tests": "${{ env. LINT_PROBLEMS }}"}}'

