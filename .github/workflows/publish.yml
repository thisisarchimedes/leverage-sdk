name: Publish Package

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Ensure all history is fetched

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          registry-url: "https://npm.pkg.github.com"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      - name: List contents of the src directory
        run: ls -al src/

      # Build the project
      - name: Build the project
        run: npm run build

      # Fetch all tags, check if any exist, and set version accordingly
      - name: Fetch tags and set version
        run: |
          git fetch --tags
          # Get the latest semantic version tag
          LATEST_TAG=$(git tag -l --sort=-v:refname 'v*' | head -n 1)
          echo "Latest tag: $LATEST_TAG"
          if [[ "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Use awk to increment patch version
            NEW_VERSION=$(echo ${LATEST_TAG:1} | awk -F. -v OFS=. '{$NF++; print}')
          else
            echo "No valid semantic version tags found. Starting from a default version."
            NEW_VERSION="1.0.0"
          fi
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          npm version $NEW_VERSION --no-git-tag-version

      # Commit any changes (including updated package version)
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff-index --quiet HEAD || git commit -m "Set version to $NEW_VERSION"

      # Tag new version and push
      - name: Tag and push
        run: |
          if [ -n "${{ env.NEW_VERSION }}" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag v${{ env.NEW_VERSION }}
            git push origin HEAD:main --tags
          else
            echo "Error: NEW_VERSION is not set. Skipping tag creation."
            exit 1
          fi

      # Publish the package to GitHub Packages
      - name: Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
