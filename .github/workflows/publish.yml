name: Publish Package

on:
  push:
    branches:
      - main

env:
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"

      - name: Check for changes in src/
        id: check_changes
        run: |
          echo "::set-output name=src_changed::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^src/' && echo 'true' || echo 'false')"
    
      - name: SonarCloud Scan
        if: steps.check_changes.outputs.src_changed == 'true'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          registry-url: "https://npm.pkg.github.com"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      - name: Lint Code
        run: npx eslint . --ext .js,.jsx,.ts,.tsx -c .eslintrc.cjs --ignore-pattern /devops/  

      # Build the project
      - name: Build the project
        run: npm run build

      # Fetch all tags, check if any exist, and set version accordingly
      - name: Fetch tags and set version
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l --sort=-v:refname 'v*' | head -n 1)
          echo "Latest tag: $LATEST_TAG"

          # Fetch current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"

          if [[ "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            NEW_VERSION=$(echo ${LATEST_TAG:1} | awk -F. -v OFS=. '{$NF++; print}')
          else
            echo "No valid semantic version tags found or tags are not in expected format."
            # Increment the current version's patch number
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++; print}')
          fi

          if [ "$NEW_VERSION" == "$CURRENT_VERSION" ]; then
            echo "New version is the same as current version. Incrementing patch number."
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++; print}')
          fi

          echo "New version to set: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          npm version $NEW_VERSION --no-git-tag-version

      # Commit any changes (including updated package version)
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff-index --quiet HEAD || git commit -m "Set version to $NEW_VERSION"

      # Tag new version and push
      - name: Tag and push
        run: |
          if [ -n "${{ env.NEW_VERSION }}" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git fetch origin main
            git rebase origin/main
            git tag v${{ env.NEW_VERSION }}
            git push origin main --tags
          else
            echo "Error: NEW_VERSION is not set. Skipping tag creation."
            exit 1
          fi

      # Publish the package to GitHub Packages
      - name: Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
